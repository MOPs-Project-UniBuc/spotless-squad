name: Python

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


permissions:
  contents: read
  pull-requests: read
  issues: read

# jobs for python
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}


      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with ruff
        run: |
          ruff --output-format=github .
        continue-on-error: false

      - name: Test with pytest
        run: |
          pytest \
          -v \
          -n auto \
          --random-order \
          --html=pytest-report.html --self-contained-html \
          --exitfirst \
          --doctest-modules \
          --junitxml=junit/test-results-${{ matrix.python-version }}.xml \
          spotlesssquad/tests/
          
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        if: ${{ always() }}
      
      - name: Run tests
        run: |
          pytest \
          -v \
          -n auto \
          --random-order \
          --html=pytest-report.html --self-contained-html \
          --exitfirst \
          --no-cov-on-fail \
          --cov=spotlesssquad/ \
          --cov-branch \
          --cov-report=html:./coverage-html \
          --cov-report=json:./coverage.json \
          spotlesssquad/tests/
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          # SENTRY_URL: https://sentry.io/
        with:
          environment: production

      - name: Test with sentry
        run: |
          python -m spotlesssquad.sentry.main